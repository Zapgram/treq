# src for treq.testing (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
from treq.client import HTTPClient
from twisted.web.resource import Resource
from typing import Any, Optional

class _EndpointFactory:
    reactor: Any = ...
    def endpointForURI(self, uri: Any): ...
    def __init__(self, reactor: Any) -> None: ...
    def __eq__(self, o: object) -> bool: ...
    def __ne__(self, o: object) -> bool: ...
    def __lt__(self, other: Any) -> None: ...
    def __le__(self, other: Any) -> None: ...
    def __gt__(self, other: Any) -> None: ...
    def __ge__(self, other: Any) -> None: ...

class RequestTraversalAgent:
    def __init__(self, rootResource: Any) -> None: ...
    def request(self, method: Any, uri: Any, headers: Optional[Any] = ..., bodyProducer: Optional[Any] = ...): ...
    def flush(self) -> None: ...

class _SynchronousProducer:
    body: Any = ...
    length: Any = ...
    def __init__(self, body: Any) -> None: ...
    def startProducing(self, consumer: Any): ...

class StubTreq(HTTPClient):
    flush: Any = ...
    def __init__(self, resource: Any) -> None: ...
    def head(self, url: Any, **kwargs: Any): ...
    def get(self, url: Any, headers: Optional[Any] = ..., **kwargs: Any): ...
    def post(self, url: Any, data: Optional[Any] = ..., **kwargs: Any): ...
    def put(self, url: Any, data: Optional[Any] = ..., **kwargs: Any): ...
    def patch(self, url: Any, data: Optional[Any] = ..., **kwargs: Any): ...
    def delete(self, url: Any, **kwargs: Any): ...
    def request(self, method: Any, url: Any, **kwargs: Any): ...


class StringStubbingResource(Resource):
    isLeaf: bool = ...
    def __init__(self, get_response_for: Any) -> None: ...
    def render(self, request: Any): ...

class HasHeaders:
    def __init__(self, headers: Any) -> None: ...
    def __eq__(self, other_headers: Any): ...
    def __ne__(self, other_headers: Any): ...

class RequestSequence:
    def __init__(self, sequence: Any, async_failure_reporter: Optional[Any] = ...) -> None: ...
    def consumed(self): ...
    def consume(self, sync_failure_reporter: Any) -> None: ...
    def __call__(self, method: Any, url: Any, params: Any, headers: Any, data: Any): ...
